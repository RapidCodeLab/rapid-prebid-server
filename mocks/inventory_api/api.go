// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/interfaces/inventory_api.go
//
// Generated by this command:
//
//	mockgen -source internal/application/interfaces/inventory_api.go -destination mocks/inventory_api/api.go
//
// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	interfaces "github.com/RapidCodeLab/rapid-prebid-server/internal/application/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockInventoryAPI is a mock of InventoryAPI interface.
type MockInventoryAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryAPIMockRecorder
}

// MockInventoryAPIMockRecorder is the mock recorder for MockInventoryAPI.
type MockInventoryAPIMockRecorder struct {
	mock *MockInventoryAPI
}

// NewMockInventoryAPI creates a new mock instance.
func NewMockInventoryAPI(ctrl *gomock.Controller) *MockInventoryAPI {
	mock := &MockInventoryAPI{ctrl: ctrl}
	mock.recorder = &MockInventoryAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryAPI) EXPECT() *MockInventoryAPIMockRecorder {
	return m.recorder
}

// CreateEntity mocks base method.
func (m *MockInventoryAPI) CreateEntity(arg0 interfaces.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockInventoryAPIMockRecorder) CreateEntity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockInventoryAPI)(nil).CreateEntity), arg0)
}

// CreateInventory mocks base method.
func (m *MockInventoryAPI) CreateInventory(arg0 interfaces.Inventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInventory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInventory indicates an expected call of CreateInventory.
func (mr *MockInventoryAPIMockRecorder) CreateInventory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInventory", reflect.TypeOf((*MockInventoryAPI)(nil).CreateInventory), arg0)
}

// DeleteEntity mocks base method.
func (m *MockInventoryAPI) DeleteEntity(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockInventoryAPIMockRecorder) DeleteEntity(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockInventoryAPI)(nil).DeleteEntity), ID)
}

// DeleteInventory mocks base method.
func (m *MockInventoryAPI) DeleteInventory(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventory", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockInventoryAPIMockRecorder) DeleteInventory(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockInventoryAPI)(nil).DeleteInventory), ID)
}

// ReadAllEntities mocks base method.
func (m *MockInventoryAPI) ReadAllEntities() ([]interfaces.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllEntities")
	ret0, _ := ret[0].([]interfaces.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllEntities indicates an expected call of ReadAllEntities.
func (mr *MockInventoryAPIMockRecorder) ReadAllEntities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllEntities", reflect.TypeOf((*MockInventoryAPI)(nil).ReadAllEntities))
}

// ReadAllInventories mocks base method.
func (m *MockInventoryAPI) ReadAllInventories() ([]interfaces.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllInventories")
	ret0, _ := ret[0].([]interfaces.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllInventories indicates an expected call of ReadAllInventories.
func (mr *MockInventoryAPIMockRecorder) ReadAllInventories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllInventories", reflect.TypeOf((*MockInventoryAPI)(nil).ReadAllInventories))
}

// ReadEntity mocks base method.
func (m *MockInventoryAPI) ReadEntity(ID string) (interfaces.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntity", ID)
	ret0, _ := ret[0].(interfaces.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntity indicates an expected call of ReadEntity.
func (mr *MockInventoryAPIMockRecorder) ReadEntity(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntity", reflect.TypeOf((*MockInventoryAPI)(nil).ReadEntity), ID)
}

// ReadInventory mocks base method.
func (m *MockInventoryAPI) ReadInventory(ID string) (interfaces.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInventory", ID)
	ret0, _ := ret[0].(interfaces.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInventory indicates an expected call of ReadInventory.
func (mr *MockInventoryAPIMockRecorder) ReadInventory(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInventory", reflect.TypeOf((*MockInventoryAPI)(nil).ReadInventory), ID)
}

// UpdateEntity mocks base method.
func (m *MockInventoryAPI) UpdateEntity(arg0 interfaces.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockInventoryAPIMockRecorder) UpdateEntity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockInventoryAPI)(nil).UpdateEntity), arg0)
}

// UpdateInventory mocks base method.
func (m *MockInventoryAPI) UpdateInventory(arg0 interfaces.Inventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryAPIMockRecorder) UpdateInventory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventoryAPI)(nil).UpdateInventory), arg0)
}

// MockEntityAPI is a mock of EntityAPI interface.
type MockEntityAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEntityAPIMockRecorder
}

// MockEntityAPIMockRecorder is the mock recorder for MockEntityAPI.
type MockEntityAPIMockRecorder struct {
	mock *MockEntityAPI
}

// NewMockEntityAPI creates a new mock instance.
func NewMockEntityAPI(ctrl *gomock.Controller) *MockEntityAPI {
	mock := &MockEntityAPI{ctrl: ctrl}
	mock.recorder = &MockEntityAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityAPI) EXPECT() *MockEntityAPIMockRecorder {
	return m.recorder
}

// CreateEntity mocks base method.
func (m *MockEntityAPI) CreateEntity(arg0 interfaces.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockEntityAPIMockRecorder) CreateEntity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockEntityAPI)(nil).CreateEntity), arg0)
}

// DeleteEntity mocks base method.
func (m *MockEntityAPI) DeleteEntity(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockEntityAPIMockRecorder) DeleteEntity(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockEntityAPI)(nil).DeleteEntity), ID)
}

// ReadAllEntities mocks base method.
func (m *MockEntityAPI) ReadAllEntities() ([]interfaces.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllEntities")
	ret0, _ := ret[0].([]interfaces.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllEntities indicates an expected call of ReadAllEntities.
func (mr *MockEntityAPIMockRecorder) ReadAllEntities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllEntities", reflect.TypeOf((*MockEntityAPI)(nil).ReadAllEntities))
}

// ReadEntity mocks base method.
func (m *MockEntityAPI) ReadEntity(ID string) (interfaces.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntity", ID)
	ret0, _ := ret[0].(interfaces.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntity indicates an expected call of ReadEntity.
func (mr *MockEntityAPIMockRecorder) ReadEntity(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntity", reflect.TypeOf((*MockEntityAPI)(nil).ReadEntity), ID)
}

// UpdateEntity mocks base method.
func (m *MockEntityAPI) UpdateEntity(arg0 interfaces.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockEntityAPIMockRecorder) UpdateEntity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockEntityAPI)(nil).UpdateEntity), arg0)
}
